@model HNTAS.Web.UI.Models.ContactDetailsModel

@{
    ViewData["Title"] = "Your details";
}


<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">

        @* Error Summary - only displayed if ModelState is invalid *@
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="govuk-error-summary" aria-labelledby="error-summary-title" role="alert" tabindex="-1" data-module="govuk-error-summary">
                <h2 class="govuk-error-summary__title" id="error-summary-title">
                    There is a problem
                </h2>
                <div class="govuk-error-summary__body">
                    <ul class="govuk-list govuk-error-summary__list">
                        @foreach (var modelState in ViewData.ModelState.Values)
                        {
                            foreach (var error in modelState.Errors)
                            {
                                <li>
                                    <a href="#@(error.ErrorMessage.Contains("email") ? "EmailAddressDisplay" :
                                                                                       error.ErrorMessage.Contains("first name") ? "FirstName" :
                                                                                       error.ErrorMessage.Contains("last name") ? "LastName" :
                                                                                       error.ErrorMessage.Contains("contact number type") ? "PreferredContactType-Landline" : // Link to first radio for type error
                                                                                       error.ErrorMessage.Contains("landline number") ? "LandlineNumber" : // Specific error linking
                                                                                       error.ErrorMessage.Contains("mobile number") ? "MobileNumber" : // Specific error linking
                                                                                       error.ErrorMessage.Contains("extension") ? "ContactNumberExtension" :
                                                                                       error.ErrorMessage.Contains("job title") ? "JobTitle" : "")">
                            @error.ErrorMessage
                        </a>
                    </li>
                                        }
                        }
                    </ul>
                </div>
            </div>
        }

        <h1 class="govuk-heading-l">Your details</h1>

        <form asp-controller="User" asp-action="SaveContactDetails" method="post" novalidate>
            @Html.AntiForgeryToken()

            @* Email address - DISPLAY ONLY FIELD *@
            <div class="govuk-form-group">
                <label class="govuk-label" for="EmailAddressDisplay">
                    Email address
                </label>
                @if (ViewData.ModelState.ContainsKey(nameof(Model.EmailAddress)) && ViewData.ModelState[nameof(Model.EmailAddress)].Errors.Any())
                {
                    <p id="EmailAddress-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.EmailAddress)
                    </p>
                }
                <span class="govuk-body" id="EmailAddressDisplay">@Model.EmailAddress</span>
                <input type="hidden" asp-for="EmailAddress" />
            </div>

            @* First name input *@
            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey(nameof(Model.FirstName)) && ViewData.ModelState[nameof(Model.FirstName)].Errors.Any() ? "govuk-form-group--error" : "")">
                <label class="govuk-label" for="FirstName">
                    First name
                </label>
                @if (ViewData.ModelState.ContainsKey(nameof(Model.FirstName)) && ViewData.ModelState[nameof(Model.FirstName)].Errors.Any())
                {
                    <p id="FirstName-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.FirstName)
                    </p>
                }
                <input class="govuk-input govuk-!-width-two-thirds" id="FirstName" name="FirstName" type="text" autocomplete="given-name" spellcheck="false"
                       asp-for="FirstName"
                       aria-describedby="@(ViewData.ModelState.ContainsKey(nameof(Model.FirstName)) && ViewData.ModelState[nameof(Model.FirstName)].Errors.Any() ? "FirstName-error" : "")">
            </div>

            @* Last name input *@
            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey(nameof(Model.LastName)) && ViewData.ModelState[nameof(Model.LastName)].Errors.Any() ? "govuk-form-group--error" : "")">
                <label class="govuk-label" for="LastName">
                    Last name
                </label>
                @if (ViewData.ModelState.ContainsKey(nameof(Model.LastName)) && ViewData.ModelState[nameof(Model.LastName)].Errors.Any())
                {
                    <p id="LastName-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.LastName)
                    </p>
                }
                <input class="govuk-input govuk-!-width-two-thirds" id="LastName" name="LastName" type="text" autocomplete="family-name" spellcheck="false"
                       asp-for="LastName"
                       aria-describedby="@(ViewData.ModelState.ContainsKey(nameof(Model.LastName)) && ViewData.ModelState[nameof(Model.LastName)].Errors.Any() ? "LastName-error" : "")">
            </div>

            @* Preferred contact number section with conditional reveals (Landline/Mobile) *@
            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey(nameof(Model.PreferredContactType)) && ViewData.ModelState[nameof(Model.PreferredContactType)].Errors.Any() ||
                                                            (Model.PreferredContactType == "Landline" && ViewData.ModelState.ContainsKey(nameof(Model.LandlineNumber)) && ViewData.ModelState[nameof(Model.LandlineNumber)].Errors.Any()) ||
                                                            (Model.PreferredContactType == "Mobile" && ViewData.ModelState.ContainsKey(nameof(Model.MobileNumber)) && ViewData.ModelState[nameof(Model.MobileNumber)].Errors.Any()) ||
                                                            (Model.PreferredContactType == "Landline" && ViewData.ModelState.ContainsKey(nameof(Model.ContactNumberExtension)) && ViewData.ModelState[nameof(Model.ContactNumberExtension)].Errors.Any()) ? "govuk-form-group--error" : "")">
                <fieldset class="govuk-fieldset" aria-describedby="contact-number-hint @(ViewData.ModelState.ContainsKey(nameof(Model.PreferredContactType)) && ViewData.ModelState[nameof(Model.PreferredContactType)].Errors.Any() ? "PreferredContactType-error" : "")">
                    <legend class="govuk-fieldset__legend govuk-fieldset__legend--m">
                        Preferred contact number for work
                    </legend>
                    <div id="contact-number-hint" class="govuk-hint">
                        HNTAS will only use this if we need to contact you about your organisation's heat networks. For international numbers, include the country code.
                    </div>

                    @* Error for PreferredContactType radio buttons *@
                    @if (ViewData.ModelState.ContainsKey(nameof(Model.PreferredContactType)) && ViewData.ModelState[nameof(Model.PreferredContactType)].Errors.Any())
                    {
                        <p id="PreferredContactType-error" class="govuk-error-message">
                            <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.PreferredContactType)
                        </p>
                    }

                    <div class="govuk-radios" data-module="govuk-radios">
                        <div class="govuk-radios__item">
                            <input class="govuk-radios__input" id="PreferredContactType-Landline" name="PreferredContactType" type="radio" value="Landline"
                                   data-aria-controls="conditional-Landline"
                                   @(Model.PreferredContactType == "Landline" ? "checked" : "")
                                   aria-describedby="@(ViewData.ModelState.ContainsKey(nameof(Model.PreferredContactType)) && ViewData.ModelState[nameof(Model.PreferredContactType)].Errors.Any() ? "PreferredContactType-error" : "")">
                            <label class="govuk-label govuk-radios__label" for="PreferredContactType-Landline">
                                Landline
                            </label>
                        </div>
                        <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-Landline">
                            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey(nameof(Model.LandlineNumber)) && ViewData.ModelState[nameof(Model.LandlineNumber)].Errors.Any() ? "govuk-form-group--error" : "")">
                                <label class="govuk-label" for="LandlineNumber">
                                    Landline number
                                </label>
                                @if (ViewData.ModelState.ContainsKey(nameof(Model.LandlineNumber)) && ViewData.ModelState[nameof(Model.LandlineNumber)].Errors.Any())
                                {
                                    <p id="LandlineNumber-error" class="govuk-error-message">
                                        <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.LandlineNumber)
                                    </p>
                                }
                                <input class="govuk-input govuk-input--width-20" id="LandlineNumber" name="LandlineNumber" type="tel" autocomplete="tel"
                                       asp-for="LandlineNumber"
                                       aria-describedby="@(ViewData.ModelState.ContainsKey(nameof(Model.LandlineNumber)) && ViewData.ModelState[nameof(Model.LandlineNumber)].Errors.Any() ? "LandlineNumber-error" : "")">
                            </div>

                            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey(nameof(Model.ContactNumberExtension)) && ViewData.ModelState[nameof(Model.ContactNumberExtension)].Errors.Any() ? "govuk-form-group--error" : "")">
                                <label class="govuk-label" for="ContactNumberExtension">
                                    Extension (optional)
                                </label>
                                @if (ViewData.ModelState.ContainsKey(nameof(Model.ContactNumberExtension)) && ViewData.ModelState[nameof(Model.ContactNumberExtension)].Errors.Any())
                                {
                                    <p id="ContactNumberExtension-error" class="govuk-error-message">
                                        <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.ContactNumberExtension)
                                    </p>
                                }
                                <input class="govuk-input govuk-input--width-5" id="ContactNumberExtension" name="ContactNumberExtension" type="text"
                                       asp-for="ContactNumberExtension"
                                       aria-describedby="@(ViewData.ModelState.ContainsKey(nameof(Model.ContactNumberExtension)) && ViewData.ModelState[nameof(Model.ContactNumberExtension)].Errors.Any() ? "ContactNumberExtension-error" : "")">
                            </div>
                        </div>

                        <div class="govuk-radios__item">
                            <input class="govuk-radios__input" id="PreferredContactType-Mobile" name="PreferredContactType" type="radio" value="Mobile"
                                   data-aria-controls="conditional-Mobile"
                                   @(Model.PreferredContactType == "Mobile" ? "checked" : "")
                                   aria-describedby="@(ViewData.ModelState.ContainsKey(nameof(Model.PreferredContactType)) && ViewData.ModelState[nameof(Model.PreferredContactType)].Errors.Any() ? "PreferredContactType-error" : "")">
                            <label class="govuk-label govuk-radios__label" for="PreferredContactType-Mobile">
                                Mobile
                            </label>
                        </div>
                        <div class="govuk-radios__conditional govuk-radios__conditional--hidden" id="conditional-Mobile">
                            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey(nameof(Model.MobileNumber)) && ViewData.ModelState[nameof(Model.MobileNumber)].Errors.Any() ? "govuk-form-group--error" : "")">
                                <label class="govuk-label" for="MobileNumber">
                                    Mobile number
                                </label>
                                @if (ViewData.ModelState.ContainsKey(nameof(Model.MobileNumber)) && ViewData.ModelState[nameof(Model.MobileNumber)].Errors.Any())
                                {
                                    <p id="MobileNumber-error" class="govuk-error-message">
                                        <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.MobileNumber)
                                    </p>
                                }
                                <input class="govuk-input govuk-input--width-20" id="MobileNumber" name="MobileNumber" type="tel" autocomplete="tel"
                                       asp-for="MobileNumber"
                                       aria-describedby="@(ViewData.ModelState.ContainsKey(nameof(Model.MobileNumber)) && ViewData.ModelState[nameof(Model.MobileNumber)].Errors.Any() ? "MobileNumber-error" : "")">
                            </div>
                        </div>
                    </div>
                </fieldset>
            </div>

            @* Job title input *@
            <div class="govuk-form-group @(ViewData.ModelState.ContainsKey(nameof(Model.JobTitle)) && ViewData.ModelState[nameof(Model.JobTitle)].Errors.Any() ? "govuk-form-group--error" : "")">
                <label class="govuk-label" for="JobTitle">
                    Job title
                </label>
                @if (ViewData.ModelState.ContainsKey(nameof(Model.JobTitle)) && ViewData.ModelState[nameof(Model.JobTitle)].Errors.Any())
                {
                    <p id="JobTitle-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span> @Html.ValidationMessageFor(m => m.JobTitle)
                    </p>
                }
                <input class="govuk-input govuk-!-width-two-thirds" id="JobTitle" name="JobTitle" type="text" spellcheck="false"
                       asp-for="JobTitle"
                       aria-describedby="@(ViewData.ModelState.ContainsKey(nameof(Model.JobTitle)) && ViewData.ModelState[nameof(Model.JobTitle)].Errors.Any() ? "JobTitle-error" : "")">
            </div>

            @* Continue button *@
            <button type="submit" class="govuk-button" data-module="govuk-button">
                Continue
            </button>
        </form>

    </div>
</div>